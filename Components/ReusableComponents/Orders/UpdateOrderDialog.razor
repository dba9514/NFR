@using ErrorOr
@using MyApplication.Components.ReusableComponents.Common.Buttons
@using MyApplication.Models.Orders
@using MyApplication.Services.Orders
@using MyApplication.Utilities
@inject IOrdersService OrdersService
<MudDialog>
    <DialogContent>
        <div style="min-height: 60vh; max-height: 80vh; display: flex; flex-direction: column;">
            <MudForm @ref="_form" Model="@UpdateOrderItemForm" Validation="_updateOrderItemValidator.ValidateValue" Style="height: 100%">
                <MudGrid style="height: 100%">
                    <MudItem xs="12">
                        <MudSelect T="OrderLineTypes"
                                   @bind-Value="UpdateOrderItemForm.LineType"
                                   ToStringFunc="@(type => type.GetDisplayName())"
                                   Label="Line Type"
                                   Variant="Variant.Outlined">
                            @foreach (OrderLineTypes lineType in Enum.GetValues(typeof(OrderLineTypes)))
                            {
                                <MudSelectItem Value="@lineType">@lineType.GetDisplayName()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField T="string" Label="Details"
                                      Variant="Variant.Outlined" @bind-Value="UpdateOrderItemForm.Details"
                                      For="@(() => UpdateOrderItemForm.Details)"
                                      Immediate="true" Lines="3"/>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudNumericField T="int" Label="Quantity"
                                         HideSpinButtons="true"
                                         Variant="Variant.Outlined" @bind-Value="UpdateOrderItemForm.Quantity"
                                         For="@(() => UpdateOrderItemForm.Quantity)"
                                         Immediate="true"/>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudNumericField T="double" Label="Price Each"
                                         HideSpinButtons="true"
                                         Format="C2"
                                         Variant="Variant.Outlined" @bind-Value="UpdateOrderItemForm.IndividualPrice"
                                         For="@(() => UpdateOrderItemForm.IndividualPrice)"
                                         Immediate="true"/>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudNumericField T="double" Label="Total"
                                         HideSpinButtons="true"
                                         Format="C2"
                                         Variant="Variant.Outlined" Value="@UpdateOrderItemForm.TotalPrice"
                                         Disabled="true"/>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <DialogSubmitActions 
            OnConfirm="@(async () => await SubmitForm())"
            OnCancel="Cancel"
            IsLoading="@_isDisabled"/>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    private MudForm _form = new();
    [Parameter]
    public UpdateOrderItemForm UpdateOrderItemForm { get; set; } = new();
    private UpdateOrderItemValidator _updateOrderItemValidator = new();
    private void Cancel() => MudDialog.Cancel();
    private bool _isDisabled;
    
    // FormSubmission
    private async Task SubmitForm(CancellationToken cancellationToken = default)
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            _isDisabled = true;
            await Task.Delay(300);
            _isDisabled = false;
            MudDialog.Close(DialogResult.Ok(UpdateOrderItemForm));
        }
    }
}