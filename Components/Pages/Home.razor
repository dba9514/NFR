@page "/"
@using MyApplication.Components.ReusableComponents.Orders
@using MyApplication.Services.Orders
@using MyApplication.Components.ReusableComponents.Common.Alerts
@using MyApplication.Models.Orders
@inject IOrdersService OrderService

<PageTitle>OrderLines</PageTitle>

<div style="display: inline-flex; align-items: center; gap: 10px; margin-bottom: 25px;">
    <MudNumericField
        T="int"
        Variant="Variant.Outlined"
        @bind-Value="@_orderNumber"
        Label="Order Number"
    />
    <MudButton
        OnClick="LoadOrderAsync"
        Variant="Variant.Filled"
        Color="Color.Primary">
        Load Order
    </MudButton>
</div>
<ErrorsAlert ErrorMessage="@_errors"/>

@if (CurrentOrder != null)
{
    <MudButton Style="display: block;" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnAddLineClicked">Add Line</MudButton>
    <MudPaper>
        <OrderDataGrid Title="@($"Order Lines for Order # {CurrentOrder.OrderNumber}")" Order="@CurrentOrder"/>
    </MudPaper>
}


@code {
    private int _orderNumber = 0;
    private string? _errors = null;
    private OrderModel? CurrentOrder { get; set; } = null;
    
    private async Task LoadOrderAsync()
    {

        var order = await OrderService.GetOrderByIdAsync(_orderNumber);
        if (order.IsError)
        {
            _errors = order.Errors[0].Description;
            CurrentOrder = null;

        }
        else
        {
            CurrentOrder = order.Value;
        }

    }

    private async Task OnAddLineClicked()
    {
        var newItem = await OrderService.OpenCreateOrderItemDialogAsync();

        if (newItem is null || CurrentOrder is null) return;
        
        CurrentOrder.Items.Add(newItem.ToModel());

        var updatedOrder = await OrderService.UpdateOrderAsync(CurrentOrder);
        if (updatedOrder.IsError) _errors = updatedOrder.Errors[0].Description;
        else CurrentOrder = updatedOrder.Value;

    }
    

}