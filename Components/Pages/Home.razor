@page "/"
@using MyApplication.Components.ReusableComponents.Orders
@using MyApplication.Services.Orders
@using MyApplication.Components.ReusableComponents.Common.Alerts
@using MyApplication.Models.Orders
@inject IOrdersService OrderService

<PageTitle>OrderLines</PageTitle>

<div style="display: inline-flex; align-items: center; gap: 10px; margin-bottom: 25px;">
    <MudNumericField
        T="int"
        Variant="Variant.Outlined"
        Label="Order Number"
        HideSpinButtons="true"
        @bind-Value="@OrderNumber"
    />
    <MudButton
        OnClick="LoadOrderAsync"
        Variant="Variant.Filled"
        Color="Color.Primary">
        Load Order
    </MudButton>
</div>
@if (Loading)
{
    <MudProgressLinear Indeterminate="true"/>
}
<ErrorsAlert ErrorMessage="@Errors"/>

@if (CurrentOrder != null)
{
    <MudButton Style="display: block;" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnAddLineClicked">Add Line</MudButton>
    <MudPaper>
        <OrderDataGrid Title="@($"Order Lines for Order # {CurrentOrder.OrderNumber}")" Order="@CurrentOrder"/>
    </MudPaper>
}


@code {
    private int OrderNumber { get; set; } = 0;
    private string? Errors { get; set; } = null;
    private bool Loading { get; set; } = false;
    private OrderModel? CurrentOrder { get; set; } = null;
    
    private async Task LoadOrderAsync()
    {
        Loading = true;
        await Task.Delay(600);
        var order = await OrderService.GetOrderByIdAsync(OrderNumber);
        if (order.IsError)
        {
            Errors = order.Errors[0].Description;
            CurrentOrder = null;
        }
        else
        {
            CurrentOrder = order.Value;
        }

        Loading = false;
    }

    private async Task OnAddLineClicked()
    {
        var newItem = await OrderService.OpenCreateOrderItemDialogAsync();

        if (newItem is null || CurrentOrder is null) return;
        newItem.Id = GenerateId();  //This would not be needed in a realistic scenario.
        CurrentOrder.Items.Add(newItem.ToModel());

        var updatedOrder = await OrderService.UpdateOrderAsync(CurrentOrder);
        if (updatedOrder.IsError) Errors = updatedOrder.Errors[0].Description;
        else CurrentOrder = updatedOrder.Value;

    }

    
    private int GenerateId()
    {
        var highestNum = 0;
        foreach (var item in CurrentOrder!.Items)
        {
            if (item.Id > highestNum) highestNum = item.Id;

        }

        return highestNum + 1;

    }
    

}